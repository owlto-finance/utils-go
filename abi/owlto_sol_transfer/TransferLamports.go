// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package owlto_sol_transfer

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferLamports is the `transferLamports` instruction.
type TransferLamports struct {
	TransferData *TransferData

	// [0] = [WRITE, SIGNER] from
	//
	// [1] = [WRITE] to
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferLamportsInstructionBuilder creates a new `TransferLamports` instruction builder.
func NewTransferLamportsInstructionBuilder() *TransferLamports {
	nd := &TransferLamports{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetTransferData sets the "transferData" parameter.
func (inst *TransferLamports) SetTransferData(transferData TransferData) *TransferLamports {
	inst.TransferData = &transferData
	return inst
}

// SetFromAccount sets the "from" account.
func (inst *TransferLamports) SetFromAccount(from ag_solanago.PublicKey) *TransferLamports {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(from).WRITE().SIGNER()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *TransferLamports) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetToAccount sets the "to" account.
func (inst *TransferLamports) SetToAccount(to ag_solanago.PublicKey) *TransferLamports {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *TransferLamports) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *TransferLamports) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TransferLamports {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *TransferLamports) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst TransferLamports) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferLamports,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferLamports) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferLamports) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TransferData == nil {
			return errors.New("TransferData parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *TransferLamports) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferLamports")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TransferData", *inst.TransferData))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         from", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           to", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj TransferLamports) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferData` param:
	err = encoder.Encode(obj.TransferData)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferLamports) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferData`:
	err = decoder.Decode(&obj.TransferData)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferLamportsInstruction declares a new TransferLamports instruction with the provided parameters and accounts.
func NewTransferLamportsInstruction(
	// Parameters:
	transferData TransferData,
	// Accounts:
	from ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *TransferLamports {
	return NewTransferLamportsInstructionBuilder().
		SetTransferData(transferData).
		SetFromAccount(from).
		SetToAccount(to).
		SetSystemProgramAccount(systemProgram)
}
