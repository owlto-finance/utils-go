// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package owlto_sol_transfer

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferSplTokens is the `transferSplTokens` instruction.
type TransferSplTokens struct {
	TransferData *TransferData

	// [0] = [SIGNER] from
	//
	// [1] = [WRITE] fromAta
	//
	// [2] = [WRITE] toAta
	//
	// [3] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferSplTokensInstructionBuilder creates a new `TransferSplTokens` instruction builder.
func NewTransferSplTokensInstructionBuilder() *TransferSplTokens {
	nd := &TransferSplTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetTransferData sets the "transferData" parameter.
func (inst *TransferSplTokens) SetTransferData(transferData TransferData) *TransferSplTokens {
	inst.TransferData = &transferData
	return inst
}

// SetFromAccount sets the "from" account.
func (inst *TransferSplTokens) SetFromAccount(from ag_solanago.PublicKey) *TransferSplTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(from).SIGNER()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *TransferSplTokens) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFromAtaAccount sets the "fromAta" account.
func (inst *TransferSplTokens) SetFromAtaAccount(fromAta ag_solanago.PublicKey) *TransferSplTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(fromAta).WRITE()
	return inst
}

// GetFromAtaAccount gets the "fromAta" account.
func (inst *TransferSplTokens) GetFromAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetToAtaAccount sets the "toAta" account.
func (inst *TransferSplTokens) SetToAtaAccount(toAta ag_solanago.PublicKey) *TransferSplTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(toAta).WRITE()
	return inst
}

// GetToAtaAccount gets the "toAta" account.
func (inst *TransferSplTokens) GetToAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferSplTokens) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferSplTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferSplTokens) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst TransferSplTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferSplTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferSplTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferSplTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TransferData == nil {
			return errors.New("TransferData parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FromAta is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ToAta is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *TransferSplTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferSplTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TransferData", *inst.TransferData))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        from", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     fromAta", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       toAta", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj TransferSplTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferData` param:
	err = encoder.Encode(obj.TransferData)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferSplTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferData`:
	err = decoder.Decode(&obj.TransferData)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferSplTokensInstruction declares a new TransferSplTokens instruction with the provided parameters and accounts.
func NewTransferSplTokensInstruction(
	// Parameters:
	transferData TransferData,
	// Accounts:
	from ag_solanago.PublicKey,
	fromAta ag_solanago.PublicKey,
	toAta ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *TransferSplTokens {
	return NewTransferSplTokensInstructionBuilder().
		SetTransferData(transferData).
		SetFromAccount(from).
		SetFromAtaAccount(fromAta).
		SetToAtaAccount(toAta).
		SetTokenProgramAccount(tokenProgram)
}
